import org.gradle.internal.os.OperatingSystem

import java.nio.file.Paths

plugins {
    id 'com.android.library'
    id 'com.google.gms.google-services'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'com.onesignal.androidsdk.onesignal-gradle-plugin'

}

configurations.all {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim().substring(0, 8)
}

def getGitDate = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'show', '-s', '--format=%ct'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

dependencies {
    // AndroidX dependencies
    implementation 'androidx.core:core:1.9.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.sharetarget:sharetarget:1.2.0-rc02'
    implementation 'androidx.cardview:cardview:1.0.0'

    compileOnly 'org.checkerframework:checker-qual:3.25.0'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.5'

    // Firebase dependencies
    implementation 'com.google.firebase:firebase-messaging:23.0.8'
    implementation 'com.google.firebase:firebase-config:21.1.2'
    implementation 'com.google.firebase:firebase-datatransport:18.1.6'
    implementation 'com.google.firebase:firebase-appindexing:20.0.0'

    // Google Play Services dependencies
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-auth:20.3.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-wearable:18.0.0'
    implementation 'com.google.android.gms:play-services-location:20.0.0'
    implementation 'com.google.android.gms:play-services-wallet:19.1.0'

    //noinspection GradleDependency
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6' // NOT YET SUPPORTED BY TELEGRAM
    //noinspection GradleDependency
    implementation 'com.stripe:stripe-android:2.0.2' // NOT YET SUPPORTED BY TELEGRAM
    implementation 'com.google.mlkit:language-id:17.0.4'
    implementation 'com.android.billingclient:billing:5.0.0'
    implementation 'org.apache.commons:commons-text:1.9'

    // CameraX Implementation
    implementation "androidx.camera:camera-core:1.2.0-beta02"
    implementation "androidx.camera:camera-camera2:1.2.0-beta02"
    implementation "androidx.camera:camera-lifecycle:1.2.0-beta02"
    implementation "androidx.camera:camera-view:1.2.0-beta02"
    implementation "androidx.camera:camera-extensions:1.2.0-beta02"
    implementation 'androidx.interpolator:interpolator:1.0.0'

    // GOOGLE PLAY UPDATE CHECKER
    implementation 'com.google.android.play:core:1.10.3'

    // NATIVE LIBS
    implementation 'com.getkeepsafe.relinker:relinker:1.4.5'

    //noinspection GradleDependency
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.6' // NEEDED TESTS OF THE NEW R8 VERSION


    //plus
    implementation "androidx.room:room-runtime:2.4.3"
    annotationProcessor "androidx.room:room-compiler:2.4.3"
    implementation  'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.onesignal:OneSignal:[4.0.0, 4.99.99]'
    implementation 'com.google.android.gms:play-services-ads:21.1.0'
    implementation platform('com.google.firebase:firebase-bom:28.4.1')

    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation ('com.squareup.okhttp3:okhttp:4.9.3'){
        force = true
    }
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'

}

android {
    compileSdkVersion 33
    buildToolsVersion '33.0.0'
    ndkVersion '21.4.7075529'
    namespace 'org.telegram.messenger'

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    buildFeatures {
        prefab true
    }

    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    lint {
        checkReleaseBuilds false
        disable 'MissingTranslation', 'ExtraTranslation', 'BlockedPrivateApi'
    }

    packagingOptions {
        resources {
            excludes += '**'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11

        coreLibraryDesugaringEnabled true
    }

    buildTypes {
        debug {
            resValue "string", "BuildAppName", "@string/AppNameBeta"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
        }

        pbeta {
            resValue "string", "BuildAppName", "@string/AppNameBeta"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
        }

        release {
            resValue "string", "BuildAppName", "@string/AppName"
        }

        play {
            initWith release
        }
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33
        buildConfigField "String", "GIT_COMMIT_HASH", "\"${getGitHash()}\""
        buildConfigField "Long", "GIT_COMMIT_DATE", "${getGitDate()}L"
        buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
        buildConfigField "int", "BUILD_VERSION", "${APP_VERSION_CODE}"
        buildConfigField "String", "BUILD_VERSION_STRING", "\"${APP_VERSION_NAME}\""


        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-21'

            }
        }

//        externalNativeBuild {
//            cmake {
//                version '3.10.2'
//                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-21'
//                var file = Paths.get("${System.getProperty("user.dir")}${File.separator}Tools${File.separator}ccache${if (OperatingSystem.current().windows) ".exe" else ""}").toFile()
//                if (file.exists()) {
//                    println("Using ccache ${file.getAbsolutePath()}")
//                    arguments += "-DANDROID_CCACHE=${file.getAbsolutePath()}"
//                } else {
//                    throw new Exception("ccache not found")
//                }
//            }
//        }
    }
}